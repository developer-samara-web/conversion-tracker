// –ò–º–ø–æ—Ä—Ç—ã
const { logs } = require('@utils/logs');
const connectToDatabase = require('@services/mongoose');
const Invite = require('@models/Invite');
const User = require('@models/User');

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ clientId
const getUser = async (clientId) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!clientId) { throw new Error('clientId –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–∞–π—Ç
        const user = await User.findOne({ client_id: clientId }).populate({ path: 'invite', model: 'Invite' });
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!user) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return user;
    } catch (e) {
        logs('üü• <b>ERROR:[getUser]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
    }
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getUsers = async (data) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!data) { throw new Error('data –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await User.find(data).populate({ path: 'invite', model: 'Invite' });
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!users) { return 0 };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return users.length;
    } catch (e) {
        logs('üü• <b>ERROR:[getUsers]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', e);
    }
}

// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const setUser = async (clientId, inviteId, clientType) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!clientId) { throw new Error('clientId –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = new User({ 
            date: new Date(), 
            client_id: clientId,
            client_type: clientType,
            invite: inviteId
        });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
        await user.save();
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!user) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return user;
    } catch (e) {
        logs('üü• <b>ERROR:[setUser]</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const updateUser = async (id, updateData) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!id) { throw new Error('idUser –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findByIdAndUpdate(id, updateData, { new: true });
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!user) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return user;
    } catch (e) {
        logs('üü• <b>ERROR:[updateUser]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
    }
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ href
const findUser = async (href) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!href) { throw new Error('href –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç Invite –ø–æ –ø–æ–ª—é href
        const invite = await Invite.findOne({ href });
        // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∞ –Ω–µ—Ç
        if (!invite) { return null };
        // –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º Invite
        const user = await User.findOne({ invite: invite._id }).populate('invite');
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!user) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return user;
    } catch (e) {
        logs('üü• <b>ERROR:[findUser]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
    }
}

module.exports = {
    getUser,
    findUser,
    setUser,
    updateUser,
    getUsers
}