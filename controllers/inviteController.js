// –ò–º–ø–æ—Ä—Ç—ã
const { logs } = require('@utils/logs');
const connectToDatabase = require('@services/mongoose');
const Invite = require('@models/Invite');

// –ü–æ–∏—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getInvite = async (data, count) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!data) { throw new Error('data –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invite = await Invite.findOne(data).populate({ path: 'user_id', model: 'User' });
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!invite) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return invite;
    } catch (e) {
        logs('üü• <b>ERROR:[getInvite]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', e);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
const setInvite = async (ctx) => {
    const { inviteRequest } = require('@requests/inviteRequest');

    try {
        // –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç
        const invite_link = await inviteRequest(ctx);
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç
        const invite = new Invite({ date: new Date(), user_id: null, href: invite_link });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
        await invite.save();
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!invite) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return invite_link;
    } catch (e) {
        logs('üü• <b>ERROR:[setInvite]</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', e);
    } finally {
        ctx.scene.enter('start');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const setInvites = async (ctx, counter) => {
    const { inviteRequest } = require('@requests/inviteRequest');
    const invites = [];

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (counter <= 0) { throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è') }
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connectToDatabase();
        // –¶–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤
        for (let i = 0; i < counter; i++) {
            try {
                // –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç
                const invite_link = await inviteRequest(ctx);
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç
                const invite = new Invite({
                    date: new Date(),
                    user_id: null,
                    href: invite_link,
                });
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
                await invite.save();
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                if (!invite) { throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–≤–∞–π—Ç ‚Ññ${i + 1}`) }
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –º–∞—Å—Å–∏–≤
                invites.push(invite_link);
            } catch (e) {
                logs(`üü• <b>ERROR:[setInvites] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç ‚Ññ${i + 1}</b>`, e);
            }
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return invites;
    } catch (e) {
        logs('üü• <b>ERROR:[setInvites]</b> –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç–æ–≤', e);
        return null;
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
const updateInvite = async (id, userId) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!id) { throw new Error('id –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç
        const invite = await Invite.findByIdAndUpdate(id, { user_id: userId ? userId : null }, { new: true });
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!invite) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return invite;
    } catch (e) {
        logs('üü• <b>ERROR:[updateInvite]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', e);
    }
}

const findInvites = async (data) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!data) { throw new Error('data –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω') };
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await connectToDatabase();
        // –ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç Invite –ø–æ –ø–æ–ª—é href
        const invite = await Invite.find(data);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!invite) { return null };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return invite;
    } catch (e) {
        logs('üü• <b>ERROR:[findInvites]</b> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', e);
    }
}

module.exports = {
    getInvite,
    setInvite,
    setInvites,
    findInvites,
    updateInvite
};