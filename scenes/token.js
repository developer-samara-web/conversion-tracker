// –ò–º–ø–æ—Ä—Ç—ã
const { Scenes, Composer } = require('telegraf')
const { getOAuthToken } = require('@services/yandex');

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
const getCode = new Composer()
getCode.on('text', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML(`<b>‚ôªÔ∏è –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥.</b>\n\n1Ô∏è‚É£ <b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> https://oauth.yandex.ru/authorize?response_type=code&client_id=${process.env.METRIKA_CLIENT_ID}&redirect_uri=https://ya.ru`)
        return ctx.wizard.next()
    } catch (error) {
        return ctx.scene.leave()
    }
})

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
const stageResult = new Composer()
stageResult.on('message', async (ctx) => {
    try {
        const code = ctx.message.text
        const token = await getOAuthToken(code)

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
        if (token) {
            await ctx.replyWithHTML(token)
        } else {
            await ctx.replyWithHTML(`üö´ <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.</b>`)
        }

        return ctx.scene.leave()
    } catch (error) {
        return ctx.scene.leave()
    } finally {
        return ctx.scene.enter('start')
    }
})

const refreshTokenScene = new Scenes.WizardScene('refreshTokenWizard', getCode, stageResult)
module.exports = refreshTokenScene