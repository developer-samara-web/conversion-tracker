// –ò–º–ø–æ—Ä—Ç—ã
const { Scenes, Composer } = require('telegraf')
const { setInvite } = require('@controllers/inviteController')

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const getCodeInviteCounter = new Composer()
getCodeInviteCounter.on('text', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML(`<b>‚ôªÔ∏è –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>`)
        return ctx.wizard.next()
    } catch (error) {
        return ctx.scene.leave()
    }
})

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
const stageResultInviteCounter = new Composer()
stageResultInviteCounter.on('message', async (ctx) => {
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        const counter = parseInt(ctx.message.text, 10);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0
        if (isNaN(counter) || counter <= 0) {
            await ctx.replyWithHTML(`üü• <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.</b> –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.`);
            return ctx.scene.enter('start');
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = await ctx.replyWithHTML(`‚è≥ <b>–°–æ–∑–¥–∞—é –∏–Ω–≤–∞–π—Ç—ã:</b> 0 –∏–∑ ${counter}`);
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        const createInvitesWithDelay = async (ctx, counter, messageId) => {
            // –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π
            let successCount = 0;
            // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            for (let i = 1; i <= counter; i++) {
                try {
                    // –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –∏–Ω–≤–∞–π—Ç
                    const invite_link = await setInvite(ctx);
                    if (invite_link) {
                        successCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π
                    } else {
                        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç');
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await ctx.telegram.editMessageText(ctx.chat.id, messageId, null, `‚è≥ <b>–°–æ–∑–¥–∞—é –∏–Ω–≤–∞–π—Ç—ã:</b> ${i} –∏–∑ ${counter}`, { parse_mode: 'HTML' });
                } catch (error) {
                    logs(`üü• <b>ERROR:[createInvitesWithDelay]</b> –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç–∞ ‚Ññ${i}`, error);
                } finally {
                    // –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º
                    if (i < counter) { await new Promise((resolve) => setTimeout(resolve, 15000)) }
                }
            }
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
            return successCount;
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤
        const totalSuccess = await createInvitesWithDelay(ctx, counter, message.message_id);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.editMessageText(ctx.chat.id, message.message_id, null, `üü© <b>–£—Å–ø–µ—Ö:</b> –°–æ–∑–¥–∞–Ω–æ ${totalSuccess} –∏–∑ ${counter}`, { parse_mode: 'HTML' });
    } catch (error) {
        await ctx.replyWithHTML(`üü• <b>–û—à–∏–±–∫–∞:</b> ${error.message}`);
    } finally {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
        ctx.scene.enter('start');
    }
})

const setInviteCounterScene = new Scenes.WizardScene('setInviteCounterWizard', getCodeInviteCounter, stageResultInviteCounter)
module.exports = setInviteCounterScene