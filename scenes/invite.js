// –ò–º–ø–æ—Ä—Ç—ã
const { Scenes, Composer } = require('telegraf')
const { setInvites } = require('@controllers/inviteController')

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const getCodeInviteCounter = new Composer()
getCodeInviteCounter.on('text', async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML(`<b>‚ôªÔ∏è –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>`)
        return ctx.wizard.next()
    } catch (error) {
        return ctx.scene.leave()
    }
})

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
const stageResultInviteCounter = new Composer()
stageResultInviteCounter.on('message', async (ctx) => {
    try {
        const counter = ctx.message.text
        const invite = await setInvites(ctx, counter)

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
        if (invite) {
            await ctx.replyWithHTML(`üü© <b>–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–æ–≤.</b>`)
        } else {
            await ctx.replyWithHTML(`üü• <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.</b>`)
        }

        return ctx.scene.leave()
    } catch (error) {
        return ctx.scene.leave()
    } finally {
        return ctx.scene.enter('start')
    }
})

const setInviteCounterScene = new Scenes.WizardScene('setInviteCounterWizard', getCodeInviteCounter, stageResultInviteCounter)
module.exports = setInviteCounterScene