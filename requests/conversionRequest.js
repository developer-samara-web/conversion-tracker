// –ò–º–ø–æ—Ä—Ç—ã
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–æ–≤ –≤ –ú–µ—Ç—Ä–∏–∫—É
const conversionRequest = async (clientId) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!process.env.METRIKA_COUNTER_ID || !process.env.METRIKA_GOAL_ID || !process.env.METRIKA_OAUTH_TOKEN) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ CSV
        const csvData = [
            ['yclid', 'Target', 'DateTime'],
            [clientId, process.env.METRIKA_GOAL_ID, Math.floor(Date.now() / 1000)],
        ].map(row => row.join(',')).join('\n');

        // –ó–∞–ø–∏—Å—å CSV
        const filePath = './file.csv';
        fs.writeFileSync(filePath, csvData, 'utf8');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CSV
        if (!fs.existsSync(filePath)) {
            throw new Error('–§–∞–π–ª CSV –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.');
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ FormData
        const form = new FormData();
        form.append('file', fs.createReadStream(filePath), { filename: 'file.csv' });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = await axios.post(
            `https://api-metrika.yandex.net/management/v1/counter/${process.env.METRIKA_COUNTER_ID}/offline_conversions/upload?format=csv`,
            form,
            {
                headers: {
                    Authorization: `OAuth ${process.env.METRIKA_OAUTH_TOKEN}`,
                    ...form.getHeaders(),
                },
            }
        );

        // –£–¥–∞–ª–µ–Ω–∏–µ CSV
        fs.unlinkSync(filePath);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
        if (response.status === 200) {
            console.log('\x1b[32m%s\x1b[0m', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${clientId}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
            return true;
        } else {
            console.log('\x1b[31m%s\x1b[0m', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${clientId}) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.data);
            return false;
        }
    } catch (e) {
        console.error('üü• ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏–¥ –≤ –º–µ—Ç—Ä–∏–∫—É', e.response ? e.response.data : e);
    }
};


module.exports = { conversionRequest }